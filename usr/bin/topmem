#!/usr/bin/env lua
local lfs = require 'lfs'

-- Patterns
local pid_pattern = "[0-9]+"
local vm_rss_pattern = "VmRSS:%s*([0-9]+)"
local vm_swap_pattern = "VmSwap:%s*([0-9]+)"

local function get_process_values(path)
    local rss, swap
    for line in io.lines(path) do
        if rss == nil then
            rss = line:match(vm_rss_pattern)
        elseif swap == nil then
            swap = line:match(vm_swap_pattern)
        else
            break
        end
    end
    return rss, swap
end

local function get_process_first_arg(path)
  local cmdline_file = io.open(path, "r")
  if not cmdline_file then
    return nil
  end
  local cmdline = cmdline_file:read("*all")
  cmdline_file:close()
  local args = {}
  for arg in cmdline:gmatch("([^%z]+)") do
    table.insert(args, arg)
  end
  return args[1]
end

local function convert_hashmap_table(map)
  local new_hashmap = {}
  for key, value in pairs(map) do
      new_hashmap[#new_hashmap+1] = { value[1], value[2], key }
  end

  return new_hashmap
end

local function get_process_map()
    local map = {}
    for pid in lfs.dir("/proc/") do
        if pid:match(pid_pattern) then
            local f = table.concat({"/proc", pid}, "/")
            local attr = lfs.attributes(f)
            assert (type(attr) == "table")

            if attr.mode == "directory" then
                local rss, swap = get_process_values(table.concat({f, "status"}, "/"))
                local name = get_process_first_arg(table.concat({f, "cmdline"}, "/"))
                if name and rss then
                    if map[name] then
                        map[name][1] = map[name][1] + tonumber(rss)
                        map[name][2] = map[name][2] + tonumber(swap)
                    else
                        map[name] = { tonumber(rss), tonumber(swap) }
                    end
                end
            end
        end
    end
    map = convert_hashmap_table(map)
    table.sort(map, function (a, b) return (a[1] > b[1]) end)
    return map
end

local function truncateString(str)
  if #str > 25 then
    return string.sub(str, 1, 25) .. "..."
  else
    return str
  end
end

local function getFilenameFromPath(path)
  local lastSlash = string.find(path, "/[^/]*$")
  if lastSlash then
    return string.sub(path, lastSlash + 1)
  else
    return path
  end
end

local function printTop(size)
    size = size or 10
    local map = get_process_map()
    print(string.format("%-9s %35s %-9s %20s", "MEMORY", "Top " .. size .. " processes       ", "SWAP", ""))
    for i = 1, size do
        local entry = map[i]
        if entry then
            print(string.format("%-9s %-35s %-9s", tonumber(string.format("%.0f", entry[1] / 1024)) .. "M", truncateString(getFilenameFromPath(entry[3])), tonumber(string.format("%.0f", entry[2] / 1024)) .. "M"))
        end
    end
end

printTop(arg[1])
